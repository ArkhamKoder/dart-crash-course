3/30/2023

 NOTES:

    In the analysis_options.yaml theres a linter rule to always specify types or camel case.

    Truncating divison ~/ rounds off to an interger

    Unary prefix operators (before value)
        print(--age);
        print(!true);
        print(++age);
        const variables can't be mutated in unary
        modified the value and returns the result 

    Unary bitwise completement prefix operator
        print(~1);

    Unary postfix operator(after value)
        returns the value first then modifies it
        print(age++);
        print(age--);

    Binary infix(inbetween values)
        age + age1
        age != age1
        age == age1
        age % age1
        Euclidean module(remainder) %

    Bitwise infix operators
        print(age & 20) // bitwise AND 
        print(age | 20) // bitwise OR
        print(age ^ 20) // bitwise XOR
        print(age << 20) // bitwise left shift
        print(age >> 20) // bitwsie right shift
    Compound assignment operators
        age = 20;
        print(age = 30) => 30
        print(age ~/= 2) => 15 (truncating division)
        print(age *= 2); // 30
        print(age += 2); // 32
        print(age &= 2); // 2

    Optionality?
        Is the ability for a variable to either contain a value of a particular data type or be null

        String? name  = null;
        name = "John";

        If no datatype is specified dart will treat the variable a dynamic datatype.

        Null aware compound assignment operator (??=)

            String? lastName;
            lastName ??= 'Bar';
            // Assign the value of the LHS to the variable only if the variable is nullable.

        Null Aware Operator (??)
            To access the properties of optional variables

            String? nullName;
            print(nullName ?? 'Foo'); // 'Foo'.

        Nullable Collections

            List<String>? names; // could either be null or contain a list of strings.

            List<String?>? names; // could be null or contain a list of nullable strings.

4/1/2023
	NOTES:

        Late Keyword (late)
            Late variables are initialized when they are first used
            =============================
            void main(){
                print('Before');
                late String name = provideName();
                print('After');
                print('name')
            }

            String provideName(){
                print('Function is called');
                return 'Foo Bar'
            }

            Output:
            >> Before
            >> After
            >> Function is called
            >> Foo Bar
            =============================

            Late final will be initialized when they are used and can not be reaasigned.

4/2/2023
	NOTES:

        Functions
            Endeavour to specify the return type of your functions.

            If no specified return type, the function type is null (dynamic)

        Named Parameter ({Keyword name})

            void main(List<String> args) {
                sayHelloTo();
                sayHelloTo(name: null);
                sayHelloTo(name: 'Foo');
                }

            void sayHelloTo({String? name}) {
                print('Hello, $name!');
                }

            Named parameters must have a default value or be optional.

        Required Named Parameters (required)

            Use keyword 'required' to ensure a parameter is given a value in the callsite.

            Required named  parameters can be optional but cannot have a defailt value.

        Positional arguments (no symbols)

          *  They are passed in order.
          *  They don't have names associated with them at callsite.
          *  They are always required.
          *  They can't have default values

        Optional positional parameters ([])
             ===========================

             void main(List<String> args) {
                makeUpperCase();
                makeUpperCase(null);
                makeUpperCase('Foo');
                makeUpperCase('Foo', 'Bar');
                 // makeUpperCase('Foo', null);
                makeUpperCase(null, 'Bar');
                }

            void makeUpperCase([
                String? name,
                String lastName = 'Bar',
                ]) {
                print(name?.toUpperCase());
                print(lastName.toUpperCase());
                }
            ============================

4/3/2023
	NOTES:
        Control flow
            * if, else if, else.
            For loops (traditional)
            ============================
                const names = ['Foo', 'Bar', 'Baz', 'Qux'];

                for (var i = 0; i < length> ; i++) {
                    print(names[i]);
                }

                for (var i = names.length - 1, i >= 0 , i--) {
                    print(names[i]);
                }
            ============================

            For loops (modern)
                for (final name in names){
                    print(names);
                }

            While loops
            =============================
                const names = ['John', 'Paul', 'George', 'Ringo'];
                var counter = 0;

                while (counter < names.length) {
                    print(names[counter]);
                    counter++;  
                }
            =============================

            do While loop
            =============================
                counter = 0;
                    do {
                        print(names[counter++]);
                        } while (counter < names.length);

            =============================

            Switch case statements
            =============================
                void main(List<String> args) {
                    describe(1);
                    describe(1.1);
                    describe('Hello');
                    describe(true);
                    describe({'key': 'value'});
                    describe([1, 2, 3, 4]);
                    }

                    void describe<T>(T value) {
                    switch (T) {
                        case int:
                        print('This is an integer');
                        break;
                        case double:
                        print('This is a double');
                        break;
                        case String:
                        print('This is a string');
                        break;
                        case bool:
                        print('This is a boolean');
                        break;
                        case Map<String, String>:
                        print('This is a map');
                        break;
                        default:
                        print('This is something else');
                        break;
                    }
                    }
            =================================
            Switching over integer values
            // example7.dart in controls folder
            Switching over string values
            // example8.dart in controls folder
4/4/2023
	NOTES:
    Collections:
      Lists (Array)
        Lists are 0-based collections meaning their index start from zero.
        NB: Ctrl+T
        Sublist:
          names.sublist(1, 3).forEach(print) //start index is inclusive and the end is exclusive.
        Lists are internally mutable.
            final ages = [20, 30, 40];
            ages.add();
        Mapping List
            Iterating over the items in a list and converting them to another value of the same or different type.
            =================================
            ['Foo', 'Bar', 'Baz', 'Qux'].map((str) => str.length); 

4/9/2023
    NOTES:
    Collections:
        Sets {}:
            A duplicate value cannot be appended to sets.
        Spread operator (...)
            Extract every value in a collection and puts them in another of the same or different type of collection.
        Hashcode(.hashCode)
            determines if a value can appear more than once in a set.
        Collection package :
            SetEquality().equals(set1, set2);

        Maps {}:
            Maps are key-value collections.
            Adding keys to Maps if it doesn't exist
                var info = {}
                info.putIfAbsent ('keyName' () => 'value');
            Iterating through a Map
                for (final entry in info.entries){
                    print(entry.key);
                    print(entry.value);
                }
            Grabbing the value of a non-existent keys result  null.

4/9/2023
    NOTES:
    Collections:
        Iterables:
        These are lazily evaluated and generated lists.

            ================
            Check example5.dart in collections folder
            ================
        Unmodifiable List views:
            (using collection package)
            UnmodifiableListView(value);
        Unmodifiable Map views:
            (using collection package)
            UnmodifiableMapView(value);
        Synchronous generator:
            returns value for an iterable.
        
4/9/2023
    NOTES:
    Collections:
        Safelist, Canonicalized map, bool list.
        CombinedMapView... ListView... Iterables
        mergegMaps

16/9/2023
    NOTES:
    Enumeration: allows you to create similar objects in one structure.
    ================================
    enum AnimalType {rabbit, dog, cat,}
    ================================       
            
             














	
	

            

